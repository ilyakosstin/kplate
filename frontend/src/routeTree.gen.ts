/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PanelIndexRouteImport } from './routes/panel/index'
import { Route as HomeIndexRouteImport } from './routes/home/index'
import { Route as AccountIndexRouteImport } from './routes/account/index'
import { Route as AuthLoginIndexRouteImport } from './routes/auth/login/index'
import { Route as AuthRegisterCustomerIndexRouteImport } from './routes/auth/register/customer/index'
import { Route as AuthRegisterBusinessIndexRouteImport } from './routes/auth/register/business/index'

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PanelIndexRoute = PanelIndexRouteImport.update({
  id: '/panel/',
  path: '/panel/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeIndexRoute = HomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountIndexRoute = AccountIndexRouteImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginIndexRoute = AuthLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthRoute,
} as any)
const AuthRegisterCustomerIndexRoute =
  AuthRegisterCustomerIndexRouteImport.update({
    id: '/register/customer/',
    path: '/register/customer/',
    getParentRoute: () => AuthRoute,
  } as any)
const AuthRegisterBusinessIndexRoute =
  AuthRegisterBusinessIndexRouteImport.update({
    id: '/register/business/',
    path: '/register/business/',
    getParentRoute: () => AuthRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/account': typeof AccountIndexRoute
  '/home': typeof HomeIndexRoute
  '/panel': typeof PanelIndexRoute
  '/auth/login': typeof AuthLoginIndexRoute
  '/auth/register/business': typeof AuthRegisterBusinessIndexRoute
  '/auth/register/customer': typeof AuthRegisterCustomerIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/account': typeof AccountIndexRoute
  '/home': typeof HomeIndexRoute
  '/panel': typeof PanelIndexRoute
  '/auth/login': typeof AuthLoginIndexRoute
  '/auth/register/business': typeof AuthRegisterBusinessIndexRoute
  '/auth/register/customer': typeof AuthRegisterCustomerIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/account/': typeof AccountIndexRoute
  '/home/': typeof HomeIndexRoute
  '/panel/': typeof PanelIndexRoute
  '/auth/login/': typeof AuthLoginIndexRoute
  '/auth/register/business/': typeof AuthRegisterBusinessIndexRoute
  '/auth/register/customer/': typeof AuthRegisterCustomerIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/account'
    | '/home'
    | '/panel'
    | '/auth/login'
    | '/auth/register/business'
    | '/auth/register/customer'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/account'
    | '/home'
    | '/panel'
    | '/auth/login'
    | '/auth/register/business'
    | '/auth/register/customer'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/account/'
    | '/home/'
    | '/panel/'
    | '/auth/login/'
    | '/auth/register/business/'
    | '/auth/register/customer/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  AccountIndexRoute: typeof AccountIndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  PanelIndexRoute: typeof PanelIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/panel/': {
      id: '/panel/'
      path: '/panel'
      fullPath: '/panel'
      preLoaderRoute: typeof PanelIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account/': {
      id: '/account/'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login/': {
      id: '/auth/login/'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/register/customer/': {
      id: '/auth/register/customer/'
      path: '/register/customer'
      fullPath: '/auth/register/customer'
      preLoaderRoute: typeof AuthRegisterCustomerIndexRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/register/business/': {
      id: '/auth/register/business/'
      path: '/register/business'
      fullPath: '/auth/register/business'
      preLoaderRoute: typeof AuthRegisterBusinessIndexRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface AuthRouteChildren {
  AuthLoginIndexRoute: typeof AuthLoginIndexRoute
  AuthRegisterBusinessIndexRoute: typeof AuthRegisterBusinessIndexRoute
  AuthRegisterCustomerIndexRoute: typeof AuthRegisterCustomerIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginIndexRoute: AuthLoginIndexRoute,
  AuthRegisterBusinessIndexRoute: AuthRegisterBusinessIndexRoute,
  AuthRegisterCustomerIndexRoute: AuthRegisterCustomerIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  AccountIndexRoute: AccountIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  PanelIndexRoute: PanelIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
